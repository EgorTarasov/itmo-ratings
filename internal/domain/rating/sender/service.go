package sender

import (
	"context"
	"fmt"
	"itmo-ratings/internal/domain/rating"
	"log/slog"
	"slices"
	"time"
)

type Service struct {
	sender sender
	parser parser
}

func New(sender sender, parser parser) *Service {
	return &Service{
		sender: sender,
		parser: parser,
	}
}

func (s *Service) UpdateStudentRating(ctx context.Context, studentID string, telegramUserID int64, _ int) error {
	// –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –Ω–∞ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:

	programs, err := s.parser.GetAllPrograms(ctx)
	if err != nil {
		return fmt.Errorf("failed to get avaliable programs: %w", err)
	}

	for _, p := range programs {
		entries, lastUpdate, err := s.parser.GetEntries(ctx, int64(p.CompetitiveGroupID))
		if err != nil {
			slog.Info("failed to get rating entries",
				"err", err.Error(),
				"programID", p.CompetitiveGroupID,
			)
			continue
		}
		rating := calculateOurRating(entries, p.BudgetMin)

		msg, err := s.formatMessage(studentID, rating, programInfo{
			budgetSlots: p.BudgetMin,
			programID:   p.CompetitiveGroupID,
			name:        p.DirectionTitle,
			lastUpdate:  lastUpdate,
		})
		if err != nil {
			slog.Info("failed to format msg", "err", fmt.Errorf("failed to format msg: %w", err), "programID", p.CompetitiveGroupID)
			continue
		}
		err = s.sender.SendMessage(ctx, telegramUserID, msg)
		if err != nil {
			return fmt.Errorf("failed to calculate ratings stats for program: %d", p.CompetitiveGroupID)
		}
	}

	return nil
}

// slots - –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç
// slots - –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç
// entries - –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ
func calculateOurRating(entries []rating.Entry, slots int) []rating.Entry {
	if len(entries) == 0 {
		return entries
	}

	// Safeguard: ensure slots is not negative
	if slots < 0 {
		slots = 0
	}

	// Safeguard: ensure we don't exceed the actual entries length
	maxIndex := slots + 3
	if maxIndex > len(entries) {
		maxIndex = len(entries)
	}

	// 1) –±–µ—Ä–µ–º –≤ –Ω–∞—à —Ä–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ + 3
	// +3 –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ –∫—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
	relatedEntries := entries[:maxIndex]
	var other []rating.Entry
	if maxIndex < len(entries) {
		other = entries[maxIndex:]
	}

	// 2) —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ:
	// –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –í–ò + –ò–î, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –µ—Å—Ç—å —Å–æ–≥–ª–∞–Ω—Å–∏–µ –∏–ª–∏ –Ω–µ—Ç, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞
	slices.SortFunc(relatedEntries, func(a, b rating.Entry) int {
		// More robust sorting logic
		if a.TotalScores != b.TotalScores {
			if a.TotalScores > b.TotalScores {
				return -1 // a should come before b (higher score first)
			}
			return 1
		}

		// If scores are equal, check priority (lower priority comes first)
		if a.Priority != b.Priority {
			if a.Priority < b.Priority {
				return -1
			}
			return 1
		}

		// If priority is equal, check agreement status
		if a.IsSendAgreement != b.IsSendAgreement {
			if a.IsSendAgreement && !b.IsSendAgreement {
				return -1 // agreement comes first
			}
			return 1
		}

		// If everything else is equal, compare diploma average
		if a.DiplomaAverage > b.DiplomaAverage {
			return -1
		} else if a.DiplomaAverage < b.DiplomaAverage {
			return 1
		}

		return 0 // completely equal
	})

	// Combine sorted relatedEntries with other entries
	result := make([]rating.Entry, 0, len(entries))
	result = append(result, relatedEntries...)
	result = append(result, other...)

	return result
}

type programInfo struct {
	budgetSlots int
	programID   int
	name        string
	lastUpdate  time.Time
}

func (s *Service) formatMessage(studentID string, entries []rating.Entry, program programInfo) (string, error) {
	var studentEntry rating.Entry
	var studentIndex int = -1

	for i, entry := range entries {
		if entry.SSPVOID == studentID {
			studentEntry = entry
			studentIndex = i
			break
		}
	}

	if studentIndex == -1 {
		return "", fmt.Errorf("–°—Ç—É–¥–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–ª–µ–Ω–∏—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö", studentID)
	}

	totalStudents := len(entries)
	studentsAbove := studentIndex
	studentsBelow := totalStudents - studentIndex - 1

	// Calculate percentage position
	percentilePosition := float64(studentsAbove) / float64(totalStudents) * 100

	// Check if student is in budget zone
	var budgetStatus string
	if studentIndex < program.budgetSlots {
		budgetStatus = "üü¢ –í –∑–æ–Ω–µ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç"
	} else if studentIndex < program.budgetSlots+5 {
		budgetStatus = "üü° –ë–ª–∏–∑–∫–æ –∫ –±—é–¥–∂–µ—Ç–Ω–æ–π –∑–æ–Ω–µ"
	} else {
		budgetStatus = "üî¥ –í–Ω–µ –±—é–¥–∂–µ—Ç–Ω–æ–π –∑–æ–Ω—ã"
	}

	// Calculate distance to budget zone
	var distanceToBudget string
	if studentIndex >= program.budgetSlots {
		distance := studentIndex - program.budgetSlots + 1
		distanceToBudget = fmt.Sprintf("üìè –î–æ –±—é–¥–∂–µ—Ç–∞: %d –º–µ—Å—Ç", distance)
	} else {
		distanceToBudget = "üéâ –í –±—é–¥–∂–µ—Ç–Ω–æ–π –∑–æ–Ω–µ!"
	}

	// Calculate score difference with budget cutoff
	var scoreDiffWithBudget float64
	if program.budgetSlots > 0 && program.budgetSlots <= len(entries) {
		budgetCutoffScore := entries[program.budgetSlots-1].TotalScores
		scoreDiffWithBudget = budgetCutoffScore - studentEntry.TotalScores
	}

	msg := `
‚åõ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s
üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É: %d, %s

üë§ –¢–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è: %s
üìç –¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ –Ω–∞—à–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ: %d –∏–∑ %d
üìà –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: %d / %d
üéØ –¢–≤–æ–∏ –±–∞–ª–ª—ã: %.2f
üìä –û–±—â–∏–π –±–∞–ª–ª: %.2f

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–∏:
‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—ã—à–µ —Ç–µ–±—è: %d
‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∏–∂–µ —Ç–µ–±—è: %d
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.1f%%

üéØ –°—Ç–∞—Ç—É—Å: %s
%s

üìâ –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞: %.2f –±–∞–ª–ª–æ–≤
üîÑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %d
%s
`

	// Agreement status
	agreementStatus := ""
	if studentEntry.IsSendAgreement {
		agreementStatus = "‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–¥–∞–Ω–æ"
	} else {
		agreementStatus = "‚ùå –°–æ–≥–ª–∞—Å–∏–µ –Ω–µ –ø–æ–¥–∞–Ω–æ"
	}

	return fmt.Sprintf(msg,
		program.lastUpdate.String(),
		program.programID,
		program.name,
		studentEntry.SSPVOID,
		studentIndex+1, // +1 because index is 0-based
		totalStudents,
		studentEntry.Position,
		program.budgetSlots,
		studentEntry.ExamScores,
		studentEntry.TotalScores,
		studentsAbove,
		studentsBelow,
		percentilePosition,
		budgetStatus,
		distanceToBudget,
		scoreDiffWithBudget,
		studentEntry.Priority,
		agreementStatus,
	), nil
}
